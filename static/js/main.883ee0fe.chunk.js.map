{"version":3,"sources":["components/Card/enums.js","components/Card/Card.js","containers/CardsGrid/CardsGrid.js","components/VictoryMessage/VictoryMessage.js","utils/index.js","utils/constans.js","App.js","serviceWorker.js","index.js"],"names":["openStateEnum","Object","freeze","CLOSED","TMP_OPENED","OPENED","Card","src","index","openState","style","onClick","className","classNames","alt","defaultProps","e","memo","initiateOpenStates","length","Array","fill","CardGrid","board","getSrcById","onMatch","delay","cardsInRow","cardsInColumn","width","height","cardMargin","useState","openStates","setOpenStates","useEffect","tmpOpened","reduce","acc","i","push","onCardClick","setTimeout","idx1","idx2","newOpenState","map","includes","defineStateOfTmpOpened","cardStyle","margin","id","key","VictoryMessage","show","text","randomSwap","arr","randomIndex","Math","floor","random","randomIndex2","tmp","getNewBoard","newBoard","randomIndexes","allIndexes","getArrayOfAllIndexes","indexesToGet","HEIGHT","splice","getRandomIndexes","numberOfMixes","App","score","setScore","setBoard","showVictoryMessage","WIDTH","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.883ee0fe.chunk.js","sourcesContent":["export const openStateEnum = Object.freeze({\n  CLOSED: 0,\n  TMP_OPENED: 1,\n  OPENED: 2\n})\n","import React, { memo } from 'react'\nimport propTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { openStateEnum } from './enums'\nimport './Card.scss'\n\nconst Card = ({ src, index, openState, style, onClick }) =>\n  <div className={ classNames('card', { 'opened': !!openState, 'transparent': openState === openStateEnum.OPENED }) }\n       style={ style }\n       onClick={ () => onClick(index) }>\n      <img src={ src } className='card-image' alt={'card'} />\n  </div>\n\nCard.defaultProps = {\n  onClick: e => e\n}\n\nCard.propTypes = {\n  id: propTypes.any,\n  index: propTypes.number,\n  openState: propTypes.number,\n  style: propTypes.object,\n  onClick: propTypes.func\n}\n\nexport default memo(Card)\n","import React, { memo, useState, useEffect } from 'react'\nimport propTypes from 'prop-types'\nimport Card, { openStateEnum } from '../../components/Card'\nimport './CardsGrid.scss'\n\nconst initiateOpenStates = length => new Array(length).fill(openStateEnum.CLOSED)\n\nconst CardGrid = ({ board, getSrcById, onMatch, delay, cardsInRow, cardsInColumn, width, height, cardMargin }) => {\n  const [openStates, setOpenStates] = useState(initiateOpenStates(board.length))\n\n  useEffect(() => setOpenStates(initiateOpenStates(board.length)), [board])\n\n  const tmpOpened = openStates.reduce((acc, openState, i) => {\n    if (openState === openStateEnum.TMP_OPENED) {\n      acc.push(i)\n    }\n    return acc\n  },[])\n\n  const defineStateOfTmpOpened = (idx1, idx2) => {\n    const newOpenState = board[idx1] === board[idx2]? openStateEnum.OPENED : openStateEnum.CLOSED\n    setOpenStates(openStates.map((openState, i) => [idx1, idx2].includes(i) ? newOpenState : openState))\n    if (newOpenState === openStateEnum.OPENED) {\n      onMatch()\n    }\n  }\n\n  const onCardClick = index => {\n    if (openStates[index] || tmpOpened.length === 2) {\n      return\n    }\n    if (tmpOpened.length) {\n      setTimeout(() => defineStateOfTmpOpened(tmpOpened[0], index), delay)\n    }\n    setOpenStates(openStates.map((openState, i) => i === index ? openStateEnum.TMP_OPENED : openState))\n  }\n\n  const getCardStyle = () => {\n    const margin = cardMargin\n    const cardWidth = width / cardsInRow - margin * 2\n    const cardHeight = height / cardsInColumn - margin * 2\n    return { width: cardWidth, height: cardHeight, margin }\n  }\n\n  const cardStyle = getCardStyle()\n\n  return (\n    <div className='card-grid' style={{ width, height }}>\n      { board.map((id, i) =>\n        <Card\n          src={ getSrcById(id) }\n          index={ i }\n          openState={ openStates[i] }\n          style={ cardStyle }\n          onClick={ onCardClick }\n          key={ `${ id }_${ i }` }\n        />) }\n    </div>\n  )\n}\n\nCardGrid.defaultProps = {\n  board: [],\n  getSrcById: () => '',\n  onMatch: e => e,\n  delay: 800,\n  cardsInRow: 1,\n  cardsInColumn: 1,\n  width: 1000,\n  height: 500,\n  cardMargin: 1\n}\n\nCardGrid.propTypes = {\n  board: propTypes.array,\n  getSrcById: propTypes.func,\n  onMatch: propTypes.func,\n  delay: propTypes.number,\n  cardsInRow: propTypes.number,\n  cardsInColumn: propTypes.number,\n  width: propTypes.number,\n  height: propTypes.number,\n  cardMargin: propTypes.number\n}\n\nexport default memo(CardGrid)","import React, { memo } from 'react'\nimport './VictoryMessage.scss'\nimport propTypes from \"prop-types\";\n\nconst VictoryMessage = ({ show, text, onClick }) => show ?\n  <div className='victory-message'>\n    <div className='popup' onClick={ onClick }>\n      <p>{ text }</p>\n    </div>\n  </div> : null\n\nVictoryMessage.defaultProps = {\n  show: false,\n  text: '',\n  onClick: e => e\n}\n\nVictoryMessage.propTypes = {\n  show: propTypes.bool,\n  text: propTypes.string,\n  onClick: propTypes.func,\n}\n\nexport default memo(VictoryMessage)","import { WIDTH, HEIGHT, NUMBER_OF_INDEXES, MIX_FACTOR } from './constans'\n\nconst getArrayOfAllIndexes = () => {\n  const allIndexes = []\n  let i = 0\n  while (allIndexes.push(i++) < NUMBER_OF_INDEXES) {}\n  return allIndexes\n}\n\nconst getRandomIndexes = () => {\n  const randomIndexes = []\n  const allIndexes = getArrayOfAllIndexes()\n  let indexesToGet = HEIGHT * WIDTH / 2\n  while (indexesToGet--) {\n    const randomIndex = allIndexes.splice(Math.floor(Math.random() * allIndexes.length), 1)[0]\n    randomIndexes.push(randomIndex, randomIndex)\n  }\n  return randomIndexes\n}\n\nconst randomSwap = arr => {\n  const randomIndex = Math.floor(Math.random() * arr.length)\n  const randomIndex2 = Math.floor(Math.random() * arr.length)\n  const tmp = arr[randomIndex]\n  arr[randomIndex] = arr[randomIndex2]\n  arr[randomIndex2] = tmp\n}\n\nexport const getNewBoard = () => {\n  const newBoard = getRandomIndexes()\n  let numberOfMixes = HEIGHT * WIDTH * MIX_FACTOR\n  while (numberOfMixes--) {\n    randomSwap(newBoard)\n  }\n  return newBoard\n}\n\nexport const getSrcById = id => `https://www.memozor.com/jeux/jquery/objects_diy/image${id}.jpg`","export const WIDTH = 6\nexport const HEIGHT = 5\nexport const NUMBER_OF_INDEXES = 25\nexport const MIX_FACTOR = 5\nexport const DELAY = 800\nexport const SCORE_BONUS = 10\nexport const GRID_WIDTH = 1000\nexport const GRID_HEIGHT = 500\nexport const MARGIN = 1\n","import React, { useState } from 'react'\nimport CardsGrid from './containers/CardsGrid'\nimport VictoryMessage from './components/VictoryMessage'\nimport { getNewBoard, getSrcById } from './utils'\nimport { WIDTH, HEIGHT, DELAY, SCORE_BONUS, GRID_WIDTH, GRID_HEIGHT, MARGIN } from './utils/constans'\nimport './App.css'\n\nconst App = () => {\n  const [score, setScore] = useState(0)\n  const [board, setBoard] = useState(getNewBoard())\n\n  const initiateBoard = () => {\n    setBoard(getNewBoard())\n    setScore(0)\n  }\n\n  const onMatch = () => setScore(score + SCORE_BONUS)\n  const showVictoryMessage = score === WIDTH * HEIGHT * SCORE_BONUS / 2\n\n  return (\n    <div className=\"App\">\n      <h1>Score: { score }</h1>\n      <CardsGrid\n        board={ board }\n        getSrcById={ getSrcById }\n        onMatch={ onMatch }\n        delay={ DELAY }\n        cardsInRow={ WIDTH }\n        cardsInColumn={ HEIGHT }\n        width={ GRID_WIDTH }\n        height={ GRID_HEIGHT }\n        cardMargin={ MARGIN }\n      />\n      <VictoryMessage\n        show={ showVictoryMessage }\n        text={ 'Victory!' }\n        onClick={ initiateBoard }\n      />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}